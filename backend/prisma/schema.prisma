generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String?
  phoneNumber String   @unique
  email       String   @unique
  password    String
  username    String?  @unique
  role        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customers {
  id                       Int                       @id @default(autoincrement())
  firstName                String
  lastName                 String
  phoneNumber              String                    @unique
  email                    String                    @unique
  password                 String
  country                  String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  createdAt                DateTime                  @default(now())
  photo                    String?
  updatedAt                DateTime                  @updatedAt
  deletedAt                DateTime                  @default(now())
  isDeleted                Boolean                   @default(false)
  subscriptionTransactions SubscriptionTransactions?
}

model Events {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  banner         String?
  date           DateTime?
  location       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  photoGalleries PhotoGalleries?
}

model PhotoGalleries {
  id        Int      @id @default(autoincrement())
  name      String?
  image     String
  eventId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Events   @relation(fields: [eventId], references: [id])
}

model Packages {
  id                       Int                       @id @default(autoincrement())
  title                    String
  description              String
  price                    String?
  type                     String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  subscriptionTransactions SubscriptionTransactions?
}

model Subscriptions {
  id                        Int                      @id @default(autoincrement())
  startDate                 String
  endDate                   String
  status                    String?
  subscriptionTransactionId Int                      @unique
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  subscriptionTransaction   SubscriptionTransactions @relation(fields: [subscriptionTransactionId], references: [id])
}

model SubscriptionTransactions {
  id              Int            @id @default(autoincrement())
  transactionDate DateTime
  transactioncode String
  totalPayment    String
  paymentStatus   String?
  paymentMethod   String?
  orderType       String?
  customerId      Int            @unique
  packageId       Int            @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customer        Customers      @relation(fields: [customerId], references: [id])
  package         Packages       @relation(fields: [packageId], references: [id])
  subscription    Subscriptions?
}
